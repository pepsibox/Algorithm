#include<iostream>
using namespace std;
int maxn=100;
void merge(int a[],int S1,int E1,int S2,int E2);
void mergesort(int a[],int left,int right);
int find(int a[],int left,int right,int x);
int main(){
	int a[maxn],n,i,s,f,j;
	cin>>n;
	for(i=0;i<n;i++)  cin>>a[i];
	mergesort(a,0,n-1);
	cin>>s;
	for(i=0;i<n;i++){
		f=s-a[i];
		j=find(a,0,n-1,f);
		if(j!=-1) cout<<a[i]<<"+"<<a[j]<<"="<<s<<endl;
		else {
			cout<<"not find";
			break;
		}
	} 
}
void merge(int a[],int S1,int E1,int S2,int E2){
	int i=S1,j=S2;
	int temp[maxn],t=0;
	while (i<=E1&&j<=E2){
		if(a[i]<a[j])  temp[t++]=a[i++];
		else temp[t++]=a[j++];
	}
	while (i<=E1)   temp[t++]=a[i++];
	while (j<=E2)	temp[t++]=a[j++];
	for(t=0,i=S1;i<=E2;t++,i++)		a[i]=temp[t];
} 
void mergesort(int a[],int left,int right){
	int r=right,l=left,mid=(right+left)/2;
	if(l<r){
		mergesort(a,l,mid);
		mergesort(a,mid+1,r);
		merge(a,l,mid,mid+1,r);
	}
}
int find(int a[],int left,int right,int x){
	int s=x,mid=(left+right)/2;
	if(left>right) return -1;
	else if(a[mid]==s) return mid;
	else if(a[mid]>s) find(a,left,mid-1,x);
	else find(a,mid+1,right,x);
}
